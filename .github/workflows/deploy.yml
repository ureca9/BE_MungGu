name: Build and Deploy to EC2 with Blue-Green Strategy

on:
  push:
    branches:
      - main # main 브랜치에 push될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # 2. Gradle 캐시 활성화
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 3. Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      # 4. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        working-directory: backend
        run: chmod +x ./gradlew

      # 5. Build 수행
      - name: Build
        working-directory: backend
        run: ./gradlew clean build -x test

      # 6. AWS 자격 증명 설정 및 JAR 파일 S3 업로드
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload JAR to S3
        run: |
          echo "Uploading JAR file to S3..."
          aws s3 cp backend/build/libs/backend-0.0.1-SNAPSHOT.jar s3://${{ secrets.S3_JAR_BUCKET_NAME }}/backend-0.0.1-SNAPSHOT.jar

      # 7. EC2에서 환경 변수 파일 생성 및 JAR 다운로드
      - name: Setup Environment and Download JAR
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "Creating deployments directory..."
            mkdir -p /home/ubuntu/deployments

            echo "Generating .env file..."
            echo "DB_URL=${{ secrets.DB_URL }}" > /home/ubuntu/deployments/.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> /home/ubuntu/deployments/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/ubuntu/deployments/.env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> /home/ubuntu/deployments/.env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> /home/ubuntu/deployments/.env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> /home/ubuntu/deployments/.env
            echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> /home/ubuntu/deployments/.env

            echo "Downloading JAR file from S3..."
            aws s3 cp s3://${{ secrets.S3_JAR_BUCKET_NAME }}/backend-0.0.1-SNAPSHOT.jar /home/ubuntu/deployments/backend-0.0.1-SNAPSHOT.jar

            echo "Verifying JAR file..."
            if [ -f /home/ubuntu/deployments/backend-0.0.1-SNAPSHOT.jar ]; then
              echo "JAR file successfully downloaded!"
            else
              echo "JAR file download failed!"
              exit 1
            fi

      # 8. EC2에서 애플리케이션 실행
      - name: Start Application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "Stopping existing application (if any)..."
            pkill -f "java -jar" || true

            echo "Starting new application..."
            nohup java -jar --spring.config.import=optional:envfile:/home/ubuntu/deployments/.env -Dspring.profiles.active=aws -Dserver.port=8080 /home/ubuntu/deployments/backend-0.0.1-SNAPSHOT.jar > /home/ubuntu/deployments/app.log 2>&1 &

            echo "Sleeping for 10 seconds..."
            sleep 10

            echo "Checking if the application is running..."
            ps -ef | grep java

            echo "Checking if the log file exists..."
            if [ -f /home/ubuntu/deployments/app.log ]; then
              echo "Log file found. Displaying the last 10 lines:"
              tail -n 10 /home/ubuntu/deployments/app.log
            else
              echo "Log file not found! The application might have failed to start."
            fi
