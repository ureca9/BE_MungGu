name: Build and Deploy to EC2 with Blue-Green Strategy

on:
  push:
    branches:
      - main # main 브랜치에 push될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v3

      # 2. Gradle 캐시 활성화
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 3. Java 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      # 4. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        working-directory: backend
        run: chmod +x ./gradlew

      # 5. Build 수행
      - name: Build
        working-directory: backend
        run: ./gradlew clean build -x test

      # 6. 환경 변수 파일 생성 및 JAR 파일 업로드
      - name: Generate .env and Deploy JAR to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "Creating deployments directory on EC2..."
            mkdir -p /home/ubuntu/deployments
            echo "Generating .env file on EC2..."
            echo "DB_URL=${{ secrets.DB_URL }}" > /home/ubuntu/deployments/.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> /home/ubuntu/deployments/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/ubuntu/deployments/.env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> /home/ubuntu/deployments/.env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> /home/ubuntu/deployments/.env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> /home/ubuntu/deployments/.env
            echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> /home/ubuntu/deployments/.env
            echo "Uploading JAR file to EC2..."
            scp -o StrictHostKeyChecking=no backend/build/libs/backend-0.0.1-SNAPSHOT.jar ubuntu@${{ secrets.HOST_PROD }}:/home/ubuntu/deployments/
            echo "Environment file and JAR uploaded successfully."


      # 7. 현재 활성화된 Target Group 확인 및 설정
      - name: Determine Active Target Group
        run: |
          CURRENT_TARGET_GROUP=$(aws elbv2 describe-target-health --target-group-arn ${{ secrets.TARGET_GROUP_BLUE_ARN }} | jq -r '.TargetHealthDescriptions[].TargetHealth.State' | grep -m 1 "healthy" && echo "blue" || echo "green")
          echo "CURRENT_TARGET_GROUP=$CURRENT_TARGET_GROUP" >> $GITHUB_ENV
          if [ "$CURRENT_TARGET_GROUP" = "blue" ]; then
            echo "NEXT_TARGET_GROUP=${{ secrets.TARGET_GROUP_GREEN_ARN }}" >> $GITHUB_ENV
            echo "NEXT_PORT=8081" >> $GITHUB_ENV
          else
            echo "NEXT_TARGET_GROUP=${{ secrets.TARGET_GROUP_BLUE_ARN }}" >> $GITHUB_ENV
            echo "NEXT_PORT=8080" >> $GITHUB_ENV
          fi
          echo "Current Target Group: $CURRENT_TARGET_GROUP"
          echo "Next Target Group: $NEXT_TARGET_GROUP"

      # 8. EC2에서 새 애플리케이션 실행
      - name: Start New Application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "Stopping existing application (if any)..."
            pkill -f "java -jar -Dserver.port=${{ env.NEXT_PORT }}" || true

            echo "Starting new application..."
            nohup java -jar --spring.config.import=optional:envfile:/home/ubuntu/deployments/.env -Dspring.profiles.active=aws -Dserver.port=${{ env.NEXT_PORT }} /home/ubuntu/deployments/backend-0.0.1-SNAPSHOT.jar > /home/ubuntu/deployments/app.log 2>&1 &

            echo "Sleeping for 5 seconds to allow the application to start..."
            sleep 5

            echo "Checking if the application is running..."
            ps -ef | grep java

            echo "Checking if the log file exists..."
            if [ -f /home/ubuntu/deployments/app.log ]; then
              echo "Log file found. Displaying the last 10 lines:"
              tail -n 10 /home/ubuntu/deployments/app.log
            else
              echo "Log file not found! The application might have failed to start."
            fi

      # 9. 헬스 체크 수행
      - name: Health Check
        run: |
          ATTEMPTS=0
          until [ $ATTEMPTS -ge 10 ]; do
            STATUS=$(aws elbv2 describe-target-health --target-group-arn ${{ env.NEXT_TARGET_GROUP }} | jq -r '.TargetHealthDescriptions[].TargetHealth.State' | grep "healthy" || echo "unhealthy")
            if [[ "$STATUS" == *"healthy"* ]]; then
              echo "Health check passed!"
              exit 0
            fi
            ATTEMPTS=$((ATTEMPTS+1))
            sleep 10
          done
          echo "Health check failed"
          exit 1

      # 10. ELB Listener 업데이트
      - name: Update ELB to New Target Group
        run: |
          aws elbv2 modify-listener --listener-arn ${{ secrets.ELB_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ env.NEXT_TARGET_GROUP }}
          echo "ELB listener updated to point to ${{ env.NEXT_TARGET_GROUP }}"

      # 11. 이전 애플리케이션 종료
      - name: Stop Previous Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            CURRENT_PORT=$(if [ "${{ env.CURRENT_TARGET_GROUP }}" = "blue" ]; then echo "8080"; else echo "8081"; fi)
            pkill -f "java -jar -Dserver.port=$CURRENT_PORT" || echo "No application running on port $CURRENT_PORT"
            echo "Previous application stopped on port $CURRENT_PORT"
